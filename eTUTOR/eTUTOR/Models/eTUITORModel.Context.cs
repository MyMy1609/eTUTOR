//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eTUTOR.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class eTUITOREntities : DbContext
    {
        public eTUITOREntities()
            : base("name=eTUITOREntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<about> abouts { get; set; }
        public DbSet<admin> admins { get; set; }
        public DbSet<comment> comments { get; set; }
        public DbSet<common> commons { get; set; }
        public DbSet<contact_admin> contact_admin { get; set; }
        public DbSet<contact_tutor> contact_tutor { get; set; }
        public DbSet<contact> contacts { get; set; }
        public DbSet<history_lessons> history_lessons { get; set; }
        public DbSet<parent> parents { get; set; }
        public DbSet<schedule> schedules { get; set; }
        public DbSet<session> sessions { get; set; }
        public DbSet<status> status { get; set; }
        public DbSet<student> students { get; set; }
        public DbSet<submenu> submenus { get; set; }
        public DbSet<tutor> tutors { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    }
}
