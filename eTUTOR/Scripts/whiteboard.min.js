var whiteboardHub, canvas, context, canvaso, contexto, tool, WIDTH, HEIGHT, mx, my, DrawState = { Started: 0, Inprogress: 1, Completed: 2 }, DrawTool = { Pencil: 0, Line: 1, Text: 2, Rect: 3, Oval: 4, Erase: 5 }, tool_default = "line", tools = {}, INTERVAL = 20, URL = window.webkitURL || window.URL, selectedLineWidth = 5, drawObjectsCollection = [], drawObjectsCollectionStorage = [], drawPlaybackCollection = []; function DrawIt(t, e) { if (t.Tool == DrawTool.Line) switch (t.currentState) { case DrawState.Inprogress: case DrawState.Completed: context.clearRect(0, 0, canvas.width, canvas.height), context.beginPath(), context.moveTo(t.StartX, t.StartY), context.lineTo(t.CurrentX, t.CurrentY), context.stroke(), context.closePath(), t.currentState == DrawState.Completed && updatecanvas() } else if (t.Tool == DrawTool.Pencil) switch (t.currentState) { case DrawState.Started: context.beginPath(), context.moveTo(t.StartX, t.StartY); break; case DrawState.Inprogress: case DrawState.Completed: context.lineTo(t.CurrentX, t.CurrentY), context.stroke(), t.currentState == DrawState.Completed && updatecanvas() } else if (t.Tool == DrawTool.Text) switch (t.currentState) { case DrawState.Started: context.clearRect(0, 0, canvas.width, canvas.height), clear(context), context.save(), context.font = "normal 16px Calibri", context.fillStyle = "blue", context.textAlign = "left", context.textBaseline = "bottom", context.fillText(t.Text, t.StartX, t.StartY), context.restore(), updatecanvas() } else if (t.Tool == DrawTool.Erase) switch (t.currentState) { case DrawState.Started: context.fillStyle = "#FFFFFF", context.fillRect(t.StartX, t.StartY, 10, 10), context.restore(), updatecanvas(); break; case DrawState.Inprogress: case DrawState.Completed: context.fillStyle = "#FFFFFF", context.fillRect(t.CurrentX, t.CurrentY, 10, 10), context.restore(), updatecanvas() } else if (t.Tool == DrawTool.Rect) switch (t.currentState) { case DrawState.Inprogress: case DrawState.Completed: var a = Math.min(t.CurrentX, t.StartX), r = Math.min(t.CurrentY, t.StartY), n = Math.abs(t.CurrentX - t.StartX), o = Math.abs(t.CurrentY - t.StartY); if (context.clearRect(0, 0, canvas.width, canvas.height), !n || !o) return; context.strokeRect(a, r, n, o), t.currentState == DrawState.Completed && updatecanvas() }if (e && t.Tool != DrawTool.Pencil) { (drawObjectsCollection = []).push(t); var c = JSON.stringify(drawObjectsCollection); whiteboardHub.server.sendDraw(c, $("#sessinId").val(), $("#groupName").val(), canvas.width, canvas.height) } } function toggleBG1() { setTimeout(function () { $("#divShare").css("background-color", "silver"), toggleBG2() }, 800) } function toggleBG2() { setTimeout(function () { $("#divShare").css("background-color", "#C8C8C8"), toggleBG1() }, 800) } function DrawObject() { } function UpdatePlayback(t) { drawPlaybackCollection.length > 1e3 && (drawPlaybackCollection = [], alert("Playback cache is cleared due to more than 1000 items")), drawPlaybackCollection.push(t) } function Clear() { canvaso.height = canvas.height, canvaso.width = canvas.width } function Playback() { if (0 != drawPlaybackCollection.length) { canvaso.height = canvas.height, canvaso.width = canvas.width; for (var t = 0, e = drawPlaybackCollection.length; t < e; t++) { var a = drawPlaybackCollection[t]; setTimeout(function () { DrawIt(a, !1, !1) }, 3e3) } drawPlaybackCollection = [] } else alert("No drawing to play") } function scaleCanvas(t, e, a) { var r = canvas.width, n = canvas.height; switch (t.Tool) { case 0: t.CurrentX && t.CurrentY ? (t.CurrentX = Math.round(t.CurrentX / e * r), t.CurrentY = Math.round(t.CurrentY / a * n)) : t.StartX && t.StartY && (t.StartX = Math.round(t.StartX / e * r), t.StartY = Math.round(t.StartY / a * n)); break; case 1: case 3: case 5: t.CurrentX && t.CurrentY && t.StartX && t.StartY && (t.CurrentX = t.CurrentX / e * r, t.CurrentY = t.CurrentY / a * n, t.StartX = t.StartX / e * r, t.StartY = t.StartY / a * n); break; case 2: t.StartX && t.StartY && (t.StartX = t.StartX / e * r, t.StartY = t.StartY / a * n) }DrawIt(t, !1) } function clear(t) { t.clearRect(0, 0, WIDTH, HEIGHT) } function ev_canvas(t) { var e = document.compatMode && "BackCompat" != document.compatMode ? document.documentElement : document.body, a = (document.all ? e.scrollLeft : pageXOffset, document.all ? e.scrollTop : pageYOffset), r = window.navigator.appName; try { if (t.layerX || 0 == t.layerX) t._x = t.layerX, t._y = "Netscape" == r ? t.layerY : t.layerY - a; else if (t.offsetX || 0 == t.offsetX) t._x = t.offsetX, t._y = t.offsetY - a; else if (t.changedTouches[0].clientX || 0 == t.changedTouches[0].clientX) { var n = canvas.getBoundingClientRect(); t._x = t.changedTouches[0].clientX - n.left, t._y = t.changedTouches[0].clientY - n.top } var o = tool[t.type]; o && o(t) } catch (t) { alert(t.message) } } function getMouse(t) { var e = canvaso, a = 0, r = 0; if (e.offsetParent) do { a += e.offsetLeft, r += e.offsetTop } while (e = e.offsetParent); a += stylePaddingLeft, r += stylePaddingTop, a += styleBorderLeft, r += styleBorderTop, mx = t.pageX - a, my = t.pageY - r, mx = t._x, my = t._y } function updatecanvas() { contexto.drawImage(canvas, 0, 0), context.clearRect(0, 0, canvas.width, canvas.height) } function fireEvent(t, e) { var a; return document.createEventObject ? (a = document.createEventObject(), t.fireEvent("on" + e, a)) : ((a = document.createEvent("HTMLEvents")).initEvent(e, !0, !0), !t.dispatchEvent(a)) } function UpdateCanvas() { var t = document.getElementById("fileUploadImg"); LoadImageIntoCanvas(URL.createObjectURL(t.files[0])) } function LoadImageIntoCanvas(t) { var e = document.getElementById("imageView"), a = e.getContext("2d"), r = new Image; r.onload = function () { e.width = r.width, e.height = r.height, WIDTH = r.width, HEIGHT = r.height, a.clearRect(0, 0, e.width, e.height), a.drawImage(r, 1, 1, r.width, r.height) }, r.src = t, SelectTool(tool_default) } function SelectTool(t) { tools[t] && (tool = new tools[t]), "line" == t || "curve" == t || "measure" == t ? canvaso.style.cursor = "crosshair" : "select" == t ? canvaso.style.cursor = "default" : "text" == t && (canvaso.style.cursor = "text"), ChangeIcons(t) } function ChangeIcons(t) { "line" == t ? $("#imgline").attr({ src: "/images/line.png", border: "1px" }) : $("#imgline").attr({ src: "/images/line_dim.png", border: "0px" }), "pencil" == t ? $("#imgpencil").attr({ src: "/images/pencil.png", border: "1px" }) : $("#imgpencil").attr({ src: "/images/pencil_dim.png", border: "0px" }), "rect" == t ? $("#imgrect").attr({ src: "/images/rect.png", border: "1px" }) : $("#imgrect").attr({ src: "/images/rect_dim.png", border: "0px" }), "erase" == t ? $("#imgerase").attr({ src: "/images/erase.png", border: "1px" }) : $("#imgerase").attr({ src: "/images/erase_dim.png", border: "0px" }), "text" == t ? $("#imgtext").attr({ src: "/images/text.png", border: "1px" }) : $("#imgtext").attr({ src: "/images/text_dim.png", border: "0px" }) } function getAbsolutePosition(t) { var e = curtop = 0; if (t.offsetParent) for (e = t.offsetLeft, curtop = t.offsetTop; t = t.offsetParent;)e += t.offsetLeft, curtop += t.offsetTop; return [e, curtop] } function SaveDrawings() { var t = canvaso.toDataURL("image/png"); WindowObject = window.open("", "PrintPaintBrush", "toolbars=no,scrollbars=yes,status=no,resizable=no"), WindowObject.document.open(), WindowObject.document.writeln('<img src="' + t + '" />'), WindowObject.document.close(), WindowObject.focus() } $(document).ready(function () { if (canvaso = document.getElementById("whiteBoard")) if (canvaso.getContext) if (canvaso.width = $(window).width() - 50, canvaso.height = $(window).height() - 130, contexto = canvaso.getContext("2d")) { var t = canvaso.parentNode; (canvas = document.createElement("canvas")) ? (canvas.id = "imageTemp", canvas.width = canvaso.width, canvas.height = canvaso.height, t.appendChild(canvas), context = canvas.getContext("2d"), SelectTool(tool_default), canvas.addEventListener("mousedown", ev_canvas, !1), canvas.addEventListener("mousemove", ev_canvas, !1), canvas.addEventListener("mouseup", ev_canvas, !1), canvas.addEventListener("mouseout", ev_canvas, !1), canvas.addEventListener("touchstart", ev_canvas, !1), canvas.addEventListener("touchmove", ev_canvas, !1), canvas.addEventListener("touchend", ev_canvas, !1), canvas.addEventListener("touchcancel", ev_canvas, !1), context.clearRect(0, 0, canvas.width, canvas.height), toggleBG1()) : alert("Error: Cannot create a new canvas element!") } else alert("Error: failed to getContext!"); else alert("Error: no canvas.getContext!"); else alert("Error: Cannot find the imageView canvas element!") }), window.onresize = function (t) { var e = [...drawObjectsCollectionStorage], a = canvas.width, r = canvas.height; canvas.width = canvaso.width = t.target.innerWidth - 50, canvas.height = canvaso.height = t.target.innerHeight - 130; for (var n = 0, o = e.length; n < o; n++) { scaleCanvas(e[n], a, r) } }, tools.pencil = function () { var t = this; this.started = !1, drawObjectsCollection = [], this.mousedown = function (e) { var a = new DrawObject; a.Tool = DrawTool.Pencil, t.started = !0, a.currentState = DrawState.Started, a.StartX = e._x, a.StartY = e._y, DrawIt(a, !0), drawObjectsCollection.push(a), drawObjectsCollectionStorage.push(a) }, this.mousemove = function (e) { if (t.started) { var a = new DrawObject; a.Tool = DrawTool.Pencil, a.currentState = DrawState.Inprogress, a.CurrentX = e._x, a.CurrentY = e._y, DrawIt(a, !0), drawObjectsCollection.push(a), drawObjectsCollectionStorage.push(a) } }, this.mouseup = function (e) { if (t.started) { var a = new DrawObject; a.Tool = DrawTool.Pencil, t.started = !1, a.currentState = DrawState.Completed, a.CurrentX = e._x, a.CurrentY = e._y, DrawIt(a, !0), drawObjectsCollection.push(a), drawObjectsCollectionStorage.push(a); var r = JSON.stringify(drawObjectsCollection); whiteboardHub.server.sendDraw(r, $("#sessinId").val(), $("#groupName").val(), canvas.width, canvas.height) } }, this.mouseout = function (e) { if (t.started) { var a = JSON.stringify(drawObjectsCollection); whiteboardHub.server.sendDraw(a, $("#sessinId").val(), $("#groupName").val(), canvas.width, canvas.height) } t.started = !1 }, this.touchstart = function (e) { var a = new DrawObject; a.Tool = DrawTool.Pencil, t.started = !0, a.currentState = DrawState.Started, a.StartX = e._x, a.StartY = e._y, DrawIt(a, !0), drawObjectsCollection.push(a), drawObjectsCollectionStorage.push(a) }, this.touchmove = function (e) { if (t.started) { var a = new DrawObject; a.Tool = DrawTool.Pencil, a.currentState = DrawState.Inprogress, a.CurrentX = e._x, a.CurrentY = e._y, DrawIt(a, !0), drawObjectsCollection.push(a), drawObjectsCollectionStorage.push(a) } }, this.touchend = function (e) { if (t.started) { var a = new DrawObject; a.Tool = DrawTool.Pencil, t.started = !1, a.currentState = DrawState.Completed, a.CurrentX = e._x, a.CurrentY = e._y, DrawIt(a, !0), drawObjectsCollection.push(a), drawObjectsCollectionStorage.push(a); var r = JSON.stringify(drawObjectsCollection); whiteboardHub.server.sendDraw(r, $("#sessinId").val(), $("#groupName").val(), canvas.width, canvas.height) } }, this.touchcancel = function (e) { if (t.started) { var a = JSON.stringify(drawObjectsCollection); whiteboardHub.server.sendDraw(a, $("#sessinId").val(), $("#groupName").val(), canvas.width, canvas.height) } t.started = !1 } }, tools.rect = function () { var t = this, e = new DrawObject; e.Tool = DrawTool.Rect, this.started = !1, this.mousedown = function (a) { e.currentState = DrawState.Started, e.StartX = a._x, e.StartY = a._y, t.started = !0 }, this.mousemove = function (a) { t.started && (e.currentState = DrawState.Inprogress, e.CurrentX = a._x, e.CurrentY = a._y, DrawIt(e, !0)) }, this.mouseup = function (a) { t.started && (e.currentState = DrawState.Completed, e.CurrentX = a._x, e.CurrentY = a._y, DrawIt(e, !0), t.started = !1, drawObjectsCollectionStorage.push(e)) }, this.touchstart = function (a) { e.currentState = DrawState.Started, e.StartX = a._x, e.StartY = a._y, t.started = !0 }, this.touchmove = function (a) { t.started && (e.currentState = DrawState.Inprogress, e.CurrentX = a._x, e.CurrentY = a._y, DrawIt(e, !0)) }, this.touchend = function (a) { t.started && (e.currentState = DrawState.Completed, e.CurrentX = a._x, e.CurrentY = a._y, DrawIt(e, !0), t.started = !1, drawObjectsCollectionStorage.push(e)) } }, tools.line = function () { var t = this, e = new DrawObject; e.Tool = DrawTool.Line, this.started = !1, this.mousedown = function (a) { e.currentState = DrawState.Started, e.StartX = a._x, e.StartY = a._y, t.started = !0 }, this.mousemove = function (a) { t.started && (e.currentState = DrawState.Inprogress, e.CurrentX = a._x, e.CurrentY = a._y, DrawIt(e, !0)) }, this.mouseup = function (a) { t.started && (e.currentState = DrawState.Completed, e.CurrentX = a._x, e.CurrentY = a._y, DrawIt(e, !0), t.started = !1, drawObjectsCollectionStorage.push(e)) }, this.touchstart = function (a) { e.currentState = DrawState.Started, e.StartX = a._x, e.StartY = a._y, t.started = !0 }, this.touchmove = function (a) { t.started && (e.currentState = DrawState.Inprogress, e.CurrentX = a._x, e.CurrentY = a._y, DrawIt(e, !0)) }, this.touchend = function (a) { t.started && (e.currentState = DrawState.Completed, e.CurrentX = a._x, e.CurrentY = a._y, DrawIt(e, !0), t.started = !1, drawObjectsCollectionStorage.push(e)) } }, tools.text = function () { var t = this; this.started = !1; var e = new DrawObject; e.Tool = DrawTool.Text, this.mousedown = function (a) { if (!t.started) { t.started = !0, e.currentState = DrawState.Started, e.StartX = a._x, e.StartY = a._y; var r = prompt("Enter the text:", " ", "Add Text"); if (e.Text = "", e.Text = r, r.length < 1) return void (t.started = !1); DrawIt(e, !0), t.started = !1, updatecanvas() } }, this.mousemove = function (e) { t.started }, this.mouseup = function (e) { t.started && (t.mousemove(e), t.started = !1, updatecanvas()) }, this.touchstart = function (a) { if (!t.started) { t.started = !0, e.currentState = DrawState.Started, e.StartX = a._x, e.StartY = a._y; var r = prompt("Enter the text:", " ", "Add Text"); if (e.Text = "", e.Text = r, r.length < 1) return void (t.started = !1); DrawIt(e, !0), t.started = !1, updatecanvas() } }, this.touchmove = function (e) { t.started }, this.touchend = function (e) { t.started && (t.mousemove(e), t.started = !1, updatecanvas()) } }, tools.erase = function (t) { var e = this; this.started = !1; var a = new DrawObject; a.Tool = DrawTool.Erase, this.mousedown = function (t) { e.started = !0, a.currentState = DrawState.Started, a.StartX = t._x, a.StartY = t._y, DrawIt(a, !0) }, this.mousemove = function (t) { e.started && (a.currentState = DrawState.Inprogress, a.CurrentX = t._x, a.CurrentY = t._y, DrawIt(a, !0)) }, this.mouseup = function (t) { a.currentState = DrawState.Completed, a.CurrentX = t._x, a.CurrentY = t._y, DrawIt(a, !0), e.started = !1 }, this.touchstart = function (t) { e.started = !0, a.currentState = DrawState.Started, a.StartX = t._x, a.StartY = t._y, DrawIt(a, !0) }, this.touchmove = function (t) { e.started && (a.currentState = DrawState.Inprogress, a.CurrentX = t._x, a.CurrentY = t._y, DrawIt(a, !0)) }, this.touchend = function (t) { a.currentState = DrawState.Completed, a.CurrentX = t._x, a.CurrentY = t._y, DrawIt(a, !0), e.started = !1 } }; var drawobjects = []; whiteboardHub = $.connection.whiteboardHub, $.connection.hub.start().done(function () { whiteboardHub.server.joinGroup($("#groupName").val()).done() }), whiteboardHub.client.handleDraw = function (t, e, a, r) { if ($("#sessinId").val() != e) { $("#divStatus").html(""), $("#divStatus").html("<i>" + name + " drawing...</i>"); var n = jQuery.parseJSON(t); drawObjectsCollectionStorage = [...drawObjectsCollectionStorage, ...n]; for (var o = 0, c = n.length; o < c; o++) { var s = n[o]; scaleCanvas(s, a, r), s.currentState && s.currentState == DrawState.Completed && ($("#divStatus").html("<i>" + name + " drawing completing...</i>"), $("#divStatus").html("")) } } };